//
//  MovieListInteractor.swift
//  MovieRecommender
//
//  Created by Djordje Ljubinkovic on 9/22/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieListBusinessLogic {
    func fetchPopularMovies()
    func selectMovie(_ request: MovieList.SelectMovie.Request)
}

protocol MovieListDataStore {
    var selectedMovie: Movie? { get set }
}

class MovieListInteractor: MovieListBusinessLogic, MovieListDataStore {
    var selectedMovie: Movie?

    var presenter: MovieListPresentationLogic?
    lazy var worker = MovieListWorker()

    // MARK: Business Logic

    func fetchPopularMovies() {
        presenter?.startLoading()
        worker.fetchPopularMovies { [weak self] result in guard let self = self else { return }
            defer {
                DispatchQueue.main.async {
                    self.presenter?.stopLoading()
                }
            }

            switch result {
                case let .success(moviesResponse):
                    let sortedByPopularityDescending = moviesResponse.popularMovies.sorted(by: { $0.popularity > $1.popularity })

                    DispatchQueue.main.async {
                        let response = MovieList.FetchPopularMovies.Response(popularMovies: sortedByPopularityDescending)
                        self.presenter?.presentPopularMovies(response)
                    }
                case let .failure(error):
                    #warning("TODO: Ideally present an error view to indicate that fetching failed.")
                    print(error.localizedDescription)
//                    DispatchQueue.main.async {
//                        self.presenter?.presentError()
//                    }
            }
        }
    }

    func selectMovie(_ request: MovieList.SelectMovie.Request) {
        self.selectedMovie = request.selectedMovie
        presenter?.presentSelectedMovie()
    }
}
